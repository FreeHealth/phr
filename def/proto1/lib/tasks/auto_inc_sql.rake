# A rake task for generating the SQL files for managing the storage
# and resetting the table auto_increment values.
# In order for this to be useful, on the SQL server machine you will
# also need to configure the server (in /etc/my.cnf) to run the
# startup file that calls the stored procedure this task generates.
# To do that, add the following to the configuration file:
# [mysqld]
init_file=Rails.root.join('db/startup_sql_for_auto_increment')
namespace :def do
  desc 'Regenerates auto_increment SQL in db from a template'
  task :generate_auto_inc_sql do
    # tables = the list of tables whose auto_increment counter needs
    # to be preserved across a MySQL server restart.
    tables = %w{obr_orders users profiles}
    template = <<END_T
/* Do not edit this file directly.  Edit the template in auto_inc_sql.rake,
   and re-run rake def:generate_auto_inc_sql. */
DROP TRIGGER IF EXISTS maintain_max_id_after_delete_on_{table_name};
DELIMITER $$
CREATE DEFINER = CURRENT_USER TRIGGER maintain_max_id_after_delete_on_{table_name}
BEFORE DELETE on {table_name}
FOR EACH ROW
BEGIN
  DECLARE max_id INT;
  DECLARE auto_rec_count INT;
  DECLARE stored_auto_inc_val INT;
  DECLARE new_auto_inc_val INT;
  SELECT max(id) INTO max_id FROM {table_name};
  IF OLD.id = max_id THEN
    SET new_auto_inc_val = max_id + 1;
    /* Look for the auto_increments record */
    SELECT count(*) FROM auto_increments WHERE table_name='{table_name}' INTO auto_rec_count; 
    IF auto_rec_count != 0 THEN
      SELECT min_auto_increment from auto_increments WHERE table_name='{table_name}' INTO stored_auto_inc_val;
      IF new_auto_inc_val > stored_auto_inc_val THEN
        UPDATE auto_increments SET min_auto_increment=new_auto_inc_val WHERE table_name='{table_name}';
      END IF;
    ELSE
      INSERT INTO auto_increments SET table_name='{table_name}', min_auto_increment=new_auto_inc_val;
    END IF;
  END IF;
END;
$$
DELIMITER ;
END_T
    
    tables.each do |t_name|
      trigger_text = template.gsub(/\{table_name\}/, t_name)
      f = File.open(Rails.root.join('db', 'triggers',
        "CREATE_maintain_max_id_after_delete_on_#{t_name}"), 'w')
      f.puts(trigger_text)
      f.close

      # Also write the DROP file.
      f = File.open(Rails.root.join('db', 'triggers',
        "DROP_maintain_max_id_after_delete_on_#{t_name}"), 'w')
      f.puts("DROP TRIGGER IF EXISTS maintain_max_id_after_delete_on_#{t_name}")
      f.close
    end

    # Now write the SQL that needs to run on startup, to restore the
    # auto_increment values from the database table.  The init_file in mysql
    # only takes single line statements, so the SQL will need to be put into
    # a stored procedure.  For convenience, we'll put this procedure in
    # the triggers directory with CREATE and DROP files just like the triggers.
    f = File.open(Rails.root.join('db', 'triggers',
      'CREATE_startup_sql_procedure'), 'w')
    header = <<END_H
/* Do not edit this file directly.  Edit the template in auto_inc_sql.rake,
   and re-run rake def:generate_auto_inc_sql. */
DROP PROCEDURE IF EXISTS reset_auto_increment;
DELIMITER $$
CREATE DEFINER = CURRENT_USER PROCEDURE reset_auto_increment()
BEGIN
  DECLARE auto_inc_count INT;
  DECLARE stored_auto_increment INT;
  DECLARE max_id INT;
END_H
    f.puts header
    tables.each do |t_name|
      f.puts <<END_STARTUP
  SET auto_inc_count = 0;
  SELECT count(*) FROM auto_increments WHERE table_name='#{t_name}' INTO auto_inc_count;
  IF auto_inc_count != 0 THEN
    SELECT min_auto_increment FROM auto_increments WHERE table_name='#{t_name}' INTO stored_auto_increment;
    SELECT max(id) FROM #{t_name} INTO max_id;
    IF max_id < stored_auto_increment THEN
      /* ALTER TABLE will not let you use a variable for auto_increment, so we have build the
       * statement using concat. */
      SET @alter_table_sql = CONCAT("ALTER TABLE #{t_name} AUTO_INCREMENT =", stored_auto_increment);
      PREPARE stmt FROM @alter_table_sql; 
      EXECUTE stmt; 
      DEALLOCATE PREPARE stmt;
    END IF;
  END IF;
END_STARTUP
    end
    f.puts 'END$$'
    f.puts 'DELIMITER ;'
    f.close

    # Also create the DROP file for this procedure
    f = File.open(Rails.root.join('db', 'triggers',
      'DROP_startup_sql_procedure'), 'w')
    f.puts ' DROP PROCEDURE IF EXISTS reset_auto_increment;'
    f.close
  end # task generate_auto_inc_sql
end # namespace def
